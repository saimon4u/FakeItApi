name: Deploy to EC2

on:
  push:
    branches:
      - ci-cd-ec2

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate backend .env
        run: |
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" > backend/.env
          echo "PORT=${{ secrets.PORT }}" > backend/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" > backend/.env
          echo "SALT=${{ secrets.SALT }}" > backend/.env

      - name: Generate frontend .env
        run: |
          echo "VITE_BACKEND_HOST=${{ secrets.VITE_BACKEND_HOST }}" > frontend/.env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/fakeapi-backend:latest -f backend/Dockerfile backend/.
          docker push ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/fakeapi-backend:latest

      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/fakeapi-frontend:latest -f frontend/Dockerfile frontend/.
          docker push ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/fakeapi-frontend:latest

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: docker-compose.yml,backend/.env,frontend/.env
          target: ~/deploy

      - name: SSH and deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} ${{ secrets.DOCKER_REGISTRY }}
            cd ~/deploy
            docker-compose pull
            docker-compose down
            docker-compose up -d
            cd ~
            #rm -rf deploy
            docker image prune